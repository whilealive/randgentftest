% ==================================================================
% FILE     randgentftest.sty
% INFO     
%
% DATE     25.10.2022
% OWNER    Bischofberger
% ==================================================================
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.

\ProvidesExplPackage {randgentftest} {2022-10-25} {0.1}
  {Create randomly generated true/false tests.}


% solutions will be printed in gray
\RequirePackage{xcolor}


% solution page starts with title "solutions" -
% so let's provide some translations here
\RequirePackage { translator }
\newtranslation [ to = English ] {Solutions} {Solutions}
\newtranslation [ to = German  ] {Solutions} {LÃ¶sungen}


% define checklist environment
\tl_new:N  \l__randgentftest_checkbox_tl
\tl_set:Nn \l__randgentftest_checkbox_tl { \ensuremath { \square } }

\tl_new:N  \l__randgentftest_checkedbox_tl
\tl_set:Nn \l__randgentftest_checkedbox_tl {
  \mbox { \makebox [ 0pt ] [ l ] { \raisebox { 0.22ex } { \ensuremath { \times } } } \ensuremath { \square } } }

% checkbox alternative using tikz (not relying on fonts): 
\NewDocumentCommand \DrawTikZcheckboxes { } {
  \RequirePackage { tikz }
  \newlength { \TikZcheckboxsize }
  \AtBeginDocument { \settoheight { \TikZcheckboxsize } { A } }
  \tl_set:Nn \l__randgentftest_checkbox_tl {
    \tikz \draw (0,0) rectangle (\TikZcheckboxsize,\TikZcheckboxsize); }
  \tl_set:Nn \l__randgentftest_checkedbox_tl
  {
    \begin{tikzpicture}
      \draw (0,0) rectangle (\TikZcheckboxsize,\TikZcheckboxsize);
      \draw (0,0) -- (\TikZcheckboxsize,\TikZcheckboxsize);
      \draw (\TikZcheckboxsize,0) -- (0,\TikZcheckboxsize);
    \end{tikzpicture}
  }
}

% Using expl3 directly within randgentftest.lua is problematic - it breaks file paths with spaces etc. So here we export the variable in a traditional LaTeX2e form for later use in randgentftest.lua.
\cs_new:Npn \getCheckedbox { \tl_use:N \l__randgentftest_checkedbox_tl }

\RequirePackage { enumitem }
\newlist { checklist } { itemize } { 2 }
\setlist [ checklist,1,2 ] {
  label = \tl_use:N \l__randgentftest_checkbox_tl,
  labelindent=0pt,
  leftmargin=1.6em,
  labelsep=*,
  align = left,
  itemsep = 4ex
}


% define subfolders
% TODO: scan for all subfolders by default here?
\tl_new:N \l__randgentftest_topicfolders_tl
\NewDocumentCommand \SetTopicFoldersTo { m } { 
  \tl_set:Nn \l__randgentftest_topicfolders_tl { #1 }
}


% define true/false folders
\tl_new:N  \l__randgentftest_tFolder_tl
\tl_new:N  \l__randgentftest_fFolder_tl
\tl_set:Nn \l__randgentftest_tFolder_tl { 01-true }
\tl_set:Nn \l__randgentftest_fFolder_tl { 02-false }
\NewDocumentCommand \SetTrueFolderTo { m } {
  \tl_set:Nn \l__randgentftest_tFolder_tl { #1 }
}
\NewDocumentCommand \SetFalseFolderTo { m } {
  \tl_set:Nn \l__randgentftest_fFolder_tl { #1 }
}


% basic setup (define minimal set of variables for randgentftest to work)
\NewDocumentCommand \SetupRandgentftest { m m m } {
  \SetCollectionFolderTo { #1 }
  % TODO: take ALL subfolders as topicfolders here
  \SetTrueFolderTo { #2 }
  \SetFalseFolderTo { #3 }
}


% define filters
\tl_new:N  \l__randgentftest_filter_tl
\NewDocumentCommand \SetFilterTo { m } {
  \tl_set:Nn \l__randgentftest_filter_tl { #1 }
}


% define keys for main macros here
\keys_define:nn{randgentftest/print}
{%
  solutions .bool_set:N = \l__print_solutions_bool,
  solutions .value_required:n = true,
  solutions .initial:n = { true },
  solutions .default:n = { true },

  filepaths .bool_set:N = \l__print_filepaths_bool,
  filepaths .value_required:n = true,
  filepaths .initial:n = { false },
  filepaths .default:n = { true },
}%

% args: #1: options (optional), 
%       #2: name of collection folder,
%       #3: number of true statements, 
%       #4: number of false statements
% options:  solutions=false  (default: true)
%           printpaths=true  (default: false)
\NewDocumentCommand{\CreateStatementTest}{ o m m m }
{%
  \IfNoValueF { #1 } { \keys_set:nn { randgentftest/print } { #1 } }
  \directlua{%
    require('randgentftest.lua')
    \bool_if:NTF{\l__print_solutions_bool}
    {%
      \bool_if:NTF{\l__print_filepaths_bool}
      {%
        createRandGenTest('#2', '\l__randgentftest_topicfolders_tl', '\l__randgentftest_tFolder_tl', '\l__randgentftest_fFolder_tl', #3, #4, '\l__randgentftest_filter_tl', true, true)
      }%
      {%
        createRandGenTest('#2', '\l__randgentftest_topicfolders_tl', '\l__randgentftest_tFolder_tl', '\l__randgentftest_fFolder_tl', #3, #4, '\l__randgentftest_filter_tl', true, false)
      }%
    }%
    {%  no solutions
      createRandGenTest('#2', '\l__randgentftest_topicfolders_tl', '\l__randgentftest_tFolder_tl', '\l__randgentftest_fFolder_tl', #3, #4, '\l__randgentftest_filter_tl')
    }%
  }%
}%

% args: #1: options (optional),
%       #2: name of collection folder
% options:  printpaths=true  (default: false)
\NewDocumentCommand{\PrintEntireLibrary}{ o m }
{%
  \IfNoValueF { #1 } { \keys_set:nn { randgentftest/print } { #1 } }
  \directlua{%
    require('randgentftest.lua')
    \bool_if:NTF{\l__print_filepaths_bool}
    {%
      printAll('#2', '\l__randgentftest_tFolder_tl', '\l__randgentftest_fFolder_tl', ' ', true)
    }%
    {%
      printAll('#2', '\l__randgentftest_tFolder_tl', '\l__randgentftest_fFolder_tl', ' ', false)
    }%
  }%
}%

